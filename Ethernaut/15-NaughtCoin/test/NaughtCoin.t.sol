// SPDX-License-Identifier: UNLICENSED
/// @author @HardlyCodeMan https://github.com/HardlyCodeMan/audit_helper/
/// @info Boilerplate test file auto generated by Solidity Contract Audit Helper v0.06
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "forge-std/console.sol";
import "openzeppelin-contracts/token/ERC20/ERC20.sol";

contract NaughtCoinTest is Test, ERC20 { 
	uint public timeLock = block.timestamp + 10 * 365 days;
	uint256 public INITIAL_SUPPLY;
	address public player;

	constructor() ERC20('NaughtCoin', '0x0') {
    	player = address(0x5e77);
		INITIAL_SUPPLY = 1000000 * (10**uint256(decimals()));
		// _totalSupply = INITIAL_SUPPLY;
		// _balances[player] = INITIAL_SUPPLY;
		_mint(player, INITIAL_SUPPLY);
		emit Transfer(address(0), player, INITIAL_SUPPLY);
	}

	function testAdminTransfer() public { 
		assertEq(this.balanceOf(address(player)),INITIAL_SUPPLY);
		console.log("Player pre balance: %d",this.balanceOf(address(player)));
		console.log("Contract post balance: %d",this.balanceOf(address(this)));

		vm.prank(player);
		this.approve(address(this), INITIAL_SUPPLY);

		this.transferFrom(player, address(this), INITIAL_SUPPLY);
		console.log("Player post balance: %d",this.balanceOf(address(player)));
		console.log("Contract post balance: %d",this.balanceOf(address(this)));

		assertEq(this.balanceOf(address(player)),0);
	}

	function testPlayerTransfer() public { 
		assertEq(this.balanceOf(address(player)),INITIAL_SUPPLY);
		console.log("Player pre balance: %d",this.balanceOf(address(player)));
		console.log("Contract post balance: %d",this.balanceOf(address(this)));

		vm.startPrank(player);
		this.approve(address(player), INITIAL_SUPPLY);

		this.transferFrom(player, address(this), INITIAL_SUPPLY);
		vm.stopPrank();

		console.log("Player post balance: %d",this.balanceOf(address(player)));
		console.log("Contract post balance: %d",this.balanceOf(address(this)));

		assertEq(this.balanceOf(address(player)),0);
	}

}